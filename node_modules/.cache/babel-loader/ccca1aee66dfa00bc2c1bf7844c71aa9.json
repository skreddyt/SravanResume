{"ast":null,"code":"import LinearGradient from '../gradients/linear-gradient';\nimport RadialGradient from '../gradients/radial-gradient';\nimport LinearGradientNode from './linear-gradient-node';\nimport RadialGradientNode from './radial-gradient-node';\nimport Node from './node';\nimport ClipNode from './clip-node';\n\nvar DefinitionNode = function (Node) {\n  function DefinitionNode() {\n    Node.call(this);\n    this.definitionMap = {};\n  }\n\n  if (Node) DefinitionNode.__proto__ = Node;\n  DefinitionNode.prototype = Object.create(Node && Node.prototype);\n  DefinitionNode.prototype.constructor = DefinitionNode;\n\n  DefinitionNode.prototype.attachTo = function attachTo(domElement) {\n    this.element = domElement;\n  };\n\n  DefinitionNode.prototype.template = function template() {\n    return \"<defs>\" + this.renderChildren() + \"</defs>\";\n  };\n\n  DefinitionNode.prototype.definitionChange = function definitionChange(e) {\n    var definitions = e.definitions;\n    var action = e.action;\n\n    if (action === \"add\") {\n      this.addDefinitions(definitions);\n    } else if (action === \"remove\") {\n      this.removeDefinitions(definitions);\n    }\n  };\n\n  DefinitionNode.prototype.createDefinition = function createDefinition(type, item) {\n    var nodeType;\n\n    if (type === \"clip\") {\n      nodeType = ClipNode;\n    } else if (type === \"fill\") {\n      if (item instanceof LinearGradient) {\n        nodeType = LinearGradientNode;\n      } else if (item instanceof RadialGradient) {\n        nodeType = RadialGradientNode;\n      }\n    }\n\n    return new nodeType(item);\n  };\n\n  DefinitionNode.prototype.addDefinitions = function addDefinitions(definitions) {\n    var this$1 = this;\n\n    for (var field in definitions) {\n      this$1.addDefinition(field, definitions[field]);\n    }\n  };\n\n  DefinitionNode.prototype.addDefinition = function addDefinition(type, srcElement) {\n    var ref = this;\n    var element = ref.element;\n    var definitionMap = ref.definitionMap;\n    var id = srcElement.id;\n    var mapItem = definitionMap[id];\n\n    if (!mapItem) {\n      var node = this.createDefinition(type, srcElement);\n      definitionMap[id] = {\n        element: node,\n        count: 1\n      };\n      this.append(node);\n\n      if (element) {\n        node.attachTo(this.element);\n      }\n    } else {\n      mapItem.count++;\n    }\n  };\n\n  DefinitionNode.prototype.removeDefinitions = function removeDefinitions(definitions) {\n    var this$1 = this;\n\n    for (var field in definitions) {\n      this$1.removeDefinition(definitions[field]);\n    }\n  };\n\n  DefinitionNode.prototype.removeDefinition = function removeDefinition(srcElement) {\n    var definitionMap = this.definitionMap;\n    var id = srcElement.id;\n    var mapItem = definitionMap[id];\n\n    if (mapItem) {\n      mapItem.count--;\n\n      if (mapItem.count === 0) {\n        this.remove(this.childNodes.indexOf(mapItem.element), 1);\n        delete definitionMap[id];\n      }\n    }\n  };\n\n  return DefinitionNode;\n}(Node);\n\nexport default DefinitionNode;","map":null,"metadata":{},"sourceType":"module"}