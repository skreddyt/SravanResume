{"ast":null,"code":"import GeometryElementsArray from './geometry-elements-array';\nimport Element from './element';\nimport Path from './path';\nimport Paintable from '../mixins/paintable';\nimport Measurable from '../mixins/measurable';\nimport elementsBoundingBox from './utils/elements-bounding-box';\nimport elementsClippedBoundingBox from './utils/elements-clippend-bounding-box';\nimport { defined, last } from '../util';\n\nvar MultiPath = function (Element) {\n  function MultiPath(options) {\n    Element.call(this, options);\n    this.paths = new GeometryElementsArray();\n    this.paths.addObserver(this);\n\n    if (!defined(this.options.stroke)) {\n      this.stroke(\"#000\");\n    }\n  }\n\n  if (Element) MultiPath.__proto__ = Element;\n  MultiPath.prototype = Object.create(Element && Element.prototype);\n  MultiPath.prototype.constructor = MultiPath;\n\n  MultiPath.prototype.moveTo = function moveTo(x, y) {\n    var path = new Path();\n    path.moveTo(x, y);\n    this.paths.push(path);\n    return this;\n  };\n\n  MultiPath.prototype.lineTo = function lineTo(x, y) {\n    if (this.paths.length > 0) {\n      last(this.paths).lineTo(x, y);\n    }\n\n    return this;\n  };\n\n  MultiPath.prototype.curveTo = function curveTo(controlOut, controlIn, point) {\n    if (this.paths.length > 0) {\n      last(this.paths).curveTo(controlOut, controlIn, point);\n    }\n\n    return this;\n  };\n\n  MultiPath.prototype.arc = function arc(startAngle, endAngle, radiusX, radiusY, anticlockwise) {\n    if (this.paths.length > 0) {\n      last(this.paths).arc(startAngle, endAngle, radiusX, radiusY, anticlockwise);\n    }\n\n    return this;\n  };\n\n  MultiPath.prototype.arcTo = function arcTo(end, rx, ry, largeArc, swipe, rotation) {\n    if (this.paths.length > 0) {\n      last(this.paths).arcTo(end, rx, ry, largeArc, swipe, rotation);\n    }\n\n    return this;\n  };\n\n  MultiPath.prototype.close = function close() {\n    if (this.paths.length > 0) {\n      last(this.paths).close();\n    }\n\n    return this;\n  };\n\n  MultiPath.prototype._bbox = function _bbox(matrix) {\n    return elementsBoundingBox(this.paths, true, matrix);\n  };\n\n  MultiPath.prototype.rawBBox = function rawBBox() {\n    return elementsBoundingBox(this.paths, false);\n  };\n\n  MultiPath.prototype._containsPoint = function _containsPoint(point) {\n    var paths = this.paths;\n\n    for (var idx = 0; idx < paths.length; idx++) {\n      if (paths[idx]._containsPoint(point)) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  MultiPath.prototype._isOnPath = function _isOnPath(point) {\n    var paths = this.paths;\n    var width = this.options.stroke.width;\n\n    for (var idx = 0; idx < paths.length; idx++) {\n      if (paths[idx]._isOnPath(point, width)) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  MultiPath.prototype._clippedBBox = function _clippedBBox(transformation) {\n    return elementsClippedBoundingBox(this.paths, this.currentTransform(transformation));\n  };\n\n  return MultiPath;\n}(Element);\n\nMultiPath.prototype.nodeType = \"MultiPath\";\nPaintable.extend(MultiPath.prototype);\nMeasurable.extend(MultiPath.prototype);\nexport default MultiPath;","map":null,"metadata":{},"sourceType":"module"}