{"ast":null,"code":"/* eslint-disable no-multi-spaces, key-spacing, indent, camelcase, space-before-blocks, eqeqeq, brace-style */\n\n/* eslint-disable space-infix-ops, space-before-function-paren, array-bracket-spacing, object-curly-spacing */\n\n/* eslint-disable no-nested-ternary, max-params, default-case, no-else-return, no-empty */\n\n/* eslint-disable no-param-reassign, no-var, block-scoped-var */\nimport { createPromise } from \"../util\";\nimport { parseColor as utils_parseColor, saveAs as util_saveAs, support } from \"../common\";\nimport * as PDF from \"./core\";\nimport { Group, MultiPath, Gradient, RadialGradient } from '../drawing';\nimport * as geo from \"../geometry\";\nvar TEXT_RENDERING_MODE = PDF.TEXT_RENDERING_MODE;\nvar DASH_PATTERNS = {\n  dash: [4],\n  dashDot: [4, 2, 1, 2],\n  dot: [1, 2],\n  longDash: [8, 2],\n  longDashDot: [8, 2, 1, 2],\n  longDashDotDot: [8, 2, 1, 2, 1, 2],\n  solid: []\n};\nvar LINE_CAP = {\n  butt: 0,\n  round: 1,\n  square: 2\n};\nvar LINE_JOIN = {\n  miter: 0,\n  round: 1,\n  bevel: 2\n};\n\nfunction render(group, callback) {\n  var fonts = [],\n      images = {},\n      options = group.options;\n\n  function getOption(name, defval, hash) {\n    if (!hash) {\n      hash = options;\n    }\n\n    if (hash.pdf && hash.pdf[name] != null) {\n      return hash.pdf[name];\n    }\n\n    return defval;\n  }\n\n  var multiPage = getOption(\"multiPage\");\n  var imgDPI = getOption(\"imgDPI\");\n\n  if (imgDPI) {\n    PDF.clearImageCache();\n  }\n\n  group.traverse(function (element) {\n    dispatch({\n      Image: function (element) {\n        var url = element.src();\n\n        if (imgDPI) {\n          var box = element.bbox().size;\n          var prev = images[url];\n          box = {\n            width: Math.ceil(box.width * imgDPI / 72),\n            height: Math.ceil(box.height * imgDPI / 72)\n          };\n\n          if (prev) {\n            box.width = Math.max(prev.width, box.width);\n            box.height = Math.max(prev.height, box.height);\n          }\n\n          images[url] = box;\n        } else {\n          images[url] = null;\n        }\n      },\n      Text: function (element) {\n        var style = PDF.parseFontDef(element.options.font);\n        var url = PDF.getFontURL(style);\n\n        if (fonts.indexOf(url) < 0) {\n          fonts.push(url);\n        }\n      }\n    }, element);\n  });\n\n  function doIt() {\n    if (--count > 0) {\n      return;\n    }\n\n    var pdf = new PDF.Document({\n      producer: getOption(\"producer\"),\n      title: getOption(\"title\"),\n      author: getOption(\"author\"),\n      subject: getOption(\"subject\"),\n      keywords: getOption(\"keywords\"),\n      creator: getOption(\"creator\"),\n      date: getOption(\"date\"),\n      autoPrint: getOption(\"autoPrint\")\n    });\n\n    function drawPage(group) {\n      var options = group.options;\n      var tmp = optimize(group);\n      var bbox = tmp.bbox;\n      group = tmp.root; // var tmp, bbox;\n\n      var paperSize = getOption(\"paperSize\", getOption(\"paperSize\", \"auto\"), options),\n          addMargin = false;\n\n      if (paperSize == \"auto\") {\n        if (bbox) {\n          var size = bbox.getSize();\n          paperSize = [size.width, size.height];\n          addMargin = true;\n          var origin = bbox.getOrigin();\n          tmp = new Group();\n          tmp.transform(new geo.Matrix(1, 0, 0, 1, -origin.x, -origin.y));\n          tmp.append(group);\n          group = tmp;\n        } else {\n          paperSize = \"A4\";\n        }\n      }\n\n      var page;\n      page = pdf.addPage({\n        paperSize: paperSize,\n        margin: getOption(\"margin\", getOption(\"margin\"), options),\n        addMargin: addMargin,\n        landscape: getOption(\"landscape\", getOption(\"landscape\", false), options)\n      });\n      drawElement(group, page, pdf);\n    }\n\n    if (multiPage) {\n      group.children.forEach(drawPage);\n    } else {\n      drawPage(group);\n    }\n\n    callback(pdf.render(), pdf);\n  }\n\n  var count = 2;\n  PDF.loadFonts(fonts, doIt);\n  PDF.loadImages(images, doIt);\n}\n\nfunction toDataURL(group, callback) {\n  render(group, function (data) {\n    callback(\"data:application/pdf;base64,\" + data.base64());\n  });\n}\n\nfunction toBlob(group, callback) {\n  render(group, function (data) {\n    callback(new window.Blob([data.get()], {\n      type: \"application/pdf\"\n    }));\n  });\n}\n\nfunction saveAs(group, filename, proxy, callback) {\n  // XXX: Safari has Blob, but does not support the download attribute\n  //      so we'd end up converting to dataURL and using the proxy anyway.\n  if (window.Blob && !support.browser.safari) {\n    toBlob(group, function (blob) {\n      util_saveAs({\n        dataURI: blob,\n        fileName: filename\n      });\n\n      if (callback) {\n        callback(blob);\n      }\n    });\n  } else {\n    toDataURL(group, function (dataURL) {\n      util_saveAs({\n        dataURI: dataURL,\n        fileName: filename,\n        proxyURL: proxy\n      });\n\n      if (callback) {\n        callback(dataURL);\n      }\n    });\n  }\n}\n\nfunction dispatch(handlers, element) {\n  var handler = handlers[element.nodeType];\n\n  if (handler) {\n    return handler.call.apply(handler, arguments);\n  }\n\n  return element;\n}\n\nfunction drawElement(element, page, pdf) {\n  if (element.options._pdfDebug) {\n    page.comment(\"BEGIN: \" + element.options._pdfDebug);\n  }\n\n  var transform = element.transform();\n  var opacity = element.opacity();\n  page.save();\n\n  if (opacity != null && opacity < 1) {\n    page.setOpacity(opacity);\n  }\n\n  setStrokeOptions(element, page, pdf);\n  setFillOptions(element, page, pdf);\n\n  if (transform) {\n    var m = transform.matrix();\n    page.transform(m.a, m.b, m.c, m.d, m.e, m.f);\n  }\n\n  setClipping(element, page, pdf);\n  dispatch({\n    Path: drawPath,\n    MultiPath: drawMultiPath,\n    Circle: drawCircle,\n    Arc: drawArc,\n    Text: drawText,\n    Image: drawImage,\n    Group: drawGroup,\n    Rect: drawRect\n  }, element, page, pdf);\n  page.restore();\n\n  if (element.options._pdfDebug) {\n    page.comment(\"END: \" + element.options._pdfDebug);\n  }\n}\n\nfunction setStrokeOptions(element, page) {\n  var stroke = element.stroke && element.stroke();\n\n  if (!stroke) {\n    return;\n  }\n\n  var color = stroke.color;\n\n  if (color) {\n    color = parseColor(color);\n\n    if (color == null) {\n      return; // no stroke\n    }\n\n    page.setStrokeColor(color.r, color.g, color.b);\n\n    if (color.a != 1) {\n      page.setStrokeOpacity(color.a);\n    }\n  }\n\n  var width = stroke.width;\n\n  if (width != null) {\n    if (width === 0) {\n      return; // no stroke\n    }\n\n    page.setLineWidth(width);\n  }\n\n  var dashType = stroke.dashType;\n\n  if (dashType) {\n    page.setDashPattern(DASH_PATTERNS[dashType], 0);\n  }\n\n  var lineCap = stroke.lineCap;\n\n  if (lineCap) {\n    page.setLineCap(LINE_CAP[lineCap]);\n  }\n\n  var lineJoin = stroke.lineJoin;\n\n  if (lineJoin) {\n    page.setLineJoin(LINE_JOIN[lineJoin]);\n  }\n\n  var opacity = stroke.opacity;\n\n  if (opacity != null) {\n    page.setStrokeOpacity(opacity);\n  }\n}\n\nfunction setFillOptions(element, page) {\n  var fill = element.fill && element.fill();\n\n  if (!fill) {\n    return;\n  }\n\n  if (fill instanceof Gradient) {\n    return;\n  }\n\n  var color = fill.color;\n\n  if (color) {\n    color = parseColor(color);\n\n    if (color == null) {\n      return; // no fill\n    }\n\n    page.setFillColor(color.r, color.g, color.b);\n\n    if (color.a != 1) {\n      page.setFillOpacity(color.a);\n    }\n  }\n\n  var opacity = fill.opacity;\n\n  if (opacity != null) {\n    page.setFillOpacity(opacity);\n  }\n}\n\nfunction setClipping(element, page, pdf) {\n  // XXX: only Path supported at the moment.\n  var clip = element.clip();\n\n  if (clip) {\n    _drawPath(clip, page, pdf);\n\n    page.clip(); // page.setStrokeColor(Math.random(), Math.random(), Math.random());\n    // page.setLineWidth(1);\n    // page.stroke();\n  }\n}\n\nfunction shouldDraw(thing) {\n  return thing && (thing instanceof Gradient || thing.color && !/^(none|transparent)$/i.test(thing.color) && (thing.width == null || thing.width > 0) && (thing.opacity == null || thing.opacity > 0));\n}\n\nfunction maybeGradient(element, page, pdf, stroke) {\n  var fill = element.fill();\n\n  if (fill instanceof Gradient) {\n    if (stroke) {\n      page.clipStroke();\n    } else {\n      page.clip();\n    }\n\n    var isRadial = fill instanceof RadialGradient;\n    var start, end;\n\n    if (isRadial) {\n      start = {\n        x: fill.center().x,\n        y: fill.center().y,\n        r: 0\n      };\n      end = {\n        x: fill.center().x,\n        y: fill.center().y,\n        r: fill.radius()\n      };\n    } else {\n      start = {\n        x: fill.start().x,\n        y: fill.start().y\n      };\n      end = {\n        x: fill.end().x,\n        y: fill.end().y\n      };\n    }\n\n    var stops = fill.stops.elements().map(function (stop) {\n      var offset = stop.offset();\n\n      if (/%$/.test(offset)) {\n        offset = parseFloat(offset) / 100;\n      } else {\n        offset = parseFloat(offset);\n      }\n\n      var color = parseColor(stop.color());\n      color.a *= stop.opacity();\n      return {\n        offset: offset,\n        color: color\n      };\n    }); // Duplicats first and last stop to fix\n    // https://github.com/telerik/kendo-ui-core/issues/1782\n\n    stops.unshift(stops[0]);\n    stops.push(stops[stops.length - 1]);\n    var gradient = {\n      userSpace: fill.userSpace(),\n      type: isRadial ? \"radial\" : \"linear\",\n      start: start,\n      end: end,\n      stops: stops\n    };\n    var box = element.rawBBox();\n    var tl = box.topLeft(),\n        size = box.getSize();\n    box = {\n      left: tl.x,\n      top: tl.y,\n      width: size.width,\n      height: size.height\n    };\n    page.gradient(gradient, box);\n    return true;\n  }\n}\n\nfunction maybeFillStroke(element, page, pdf) {\n  if (shouldDraw(element.fill()) && shouldDraw(element.stroke())) {\n    if (!maybeGradient(element, page, pdf, true)) {\n      page.fillStroke();\n    }\n  } else if (shouldDraw(element.fill())) {\n    if (!maybeGradient(element, page, pdf, false)) {\n      page.fill();\n    }\n  } else if (shouldDraw(element.stroke())) {\n    page.stroke();\n  } else {\n    // we should not get here; the path should have been\n    // optimized away.  but let's be prepared.\n    page.nop();\n  }\n}\n\nfunction maybeDrawRect(path, page) {\n  var segments = path.segments;\n\n  if (segments.length == 4 && path.options.closed) {\n    // detect if this path looks like a rectangle parallel to the axis\n    var a = [];\n\n    for (var i = 0; i < segments.length; ++i) {\n      if (segments[i].controlIn()) {\n        // has curve?\n        return false;\n      }\n\n      a[i] = segments[i].anchor();\n    } // it's a rectangle if the y/x/y/x or x/y/x/y coords of\n    // consecutive points are the same.\n\n\n    var isRect = a[0].y == a[1].y && a[1].x == a[2].x && a[2].y == a[3].y && a[3].x == a[0].x || a[0].x == a[1].x && a[1].y == a[2].y && a[2].x == a[3].x && a[3].y == a[0].y;\n\n    if (isRect) {\n      // this saves a bunch of instructions in PDF:\n      // moveTo, lineTo, lineTo, lineTo, close -> rect.\n      page.rect(a[0].x, a[0].y, a[2].x - a[0].x\n      /*width*/\n      , a[2].y - a[0].y\n      /*height*/\n      );\n      return true;\n    }\n  }\n}\n\nfunction _drawPath(element, page, pdf) {\n  var segments = element.segments;\n\n  if (segments.length === 0) {\n    return;\n  }\n\n  if (!maybeDrawRect(element, page, pdf)) {\n    for (var prev, i = 0; i < segments.length; ++i) {\n      var seg = segments[i];\n      var anchor = seg.anchor();\n\n      if (!prev) {\n        page.moveTo(anchor.x, anchor.y);\n      } else {\n        var prevOut = prev.controlOut();\n        var controlIn = seg.controlIn();\n\n        if (prevOut && controlIn) {\n          page.bezier(prevOut.x, prevOut.y, controlIn.x, controlIn.y, anchor.x, anchor.y);\n        } else {\n          page.lineTo(anchor.x, anchor.y);\n        }\n      }\n\n      prev = seg;\n    }\n\n    if (element.options.closed) {\n      page.close();\n    }\n  }\n}\n\nfunction drawPath(element, page, pdf) {\n  _drawPath(element, page, pdf);\n\n  maybeFillStroke(element, page, pdf);\n}\n\nfunction drawMultiPath(element, page, pdf) {\n  var paths = element.paths;\n\n  for (var i = 0; i < paths.length; ++i) {\n    _drawPath(paths[i], page, pdf);\n  }\n\n  maybeFillStroke(element, page, pdf);\n}\n\nfunction drawCircle(element, page, pdf) {\n  var g = element.geometry();\n  page.circle(g.center.x, g.center.y, g.radius);\n  maybeFillStroke(element, page, pdf);\n}\n\nfunction drawArc(element, page, pdf) {\n  var points = element.geometry().curvePoints();\n  page.moveTo(points[0].x, points[0].y);\n\n  for (var i = 1; i < points.length;) {\n    page.bezier(points[i].x, points[i++].y, points[i].x, points[i++].y, points[i].x, points[i++].y);\n  }\n\n  maybeFillStroke(element, page, pdf);\n}\n\nfunction drawText(element, page) {\n  var style = PDF.parseFontDef(element.options.font);\n  var pos = element._position;\n  var mode;\n\n  if (element.fill() && element.stroke()) {\n    mode = TEXT_RENDERING_MODE.fillAndStroke;\n  } else if (element.fill()) {\n    mode = TEXT_RENDERING_MODE.fill;\n  } else if (element.stroke()) {\n    mode = TEXT_RENDERING_MODE.stroke;\n  }\n\n  page.transform(1, 0, 0, -1, pos.x, pos.y + style.fontSize);\n  page.beginText();\n  page.setFont(PDF.getFontURL(style), style.fontSize);\n  page.setTextRenderingMode(mode);\n  page.showText(element.content(), element._pdfRect ? element._pdfRect.width() : null);\n  page.endText();\n}\n\nfunction drawGroup(element, page, pdf) {\n  if (element._pdfLink) {\n    page.addLink(element._pdfLink.url, element._pdfLink);\n  }\n\n  var children = element.children;\n\n  for (var i = 0; i < children.length; ++i) {\n    drawElement(children[i], page, pdf);\n  }\n}\n\nfunction drawImage(element, page) {\n  var url = element.src();\n\n  if (!url) {\n    return;\n  }\n\n  var rect = element.rect();\n  var tl = rect.getOrigin();\n  var sz = rect.getSize();\n  page.transform(sz.width, 0, 0, -sz.height, tl.x, tl.y + sz.height);\n  page.drawImage(url);\n}\n\nfunction drawRect(element, page, pdf) {\n  var geometry = element.geometry();\n  page.rect(geometry.origin.x, geometry.origin.y, geometry.size.width, geometry.size.height);\n  maybeFillStroke(element, page, pdf);\n}\n\nfunction parseColor(value) {\n  var color = utils_parseColor(value, true);\n  return color ? color.toRGB() : null;\n}\n\nfunction optimize(root) {\n  var clipbox = false;\n  var matrix = geo.Matrix.unit();\n  var currentBox = null;\n  var changed;\n\n  do {\n    changed = false;\n    root = opt(root);\n  } while (root && changed);\n\n  return {\n    root: root,\n    bbox: currentBox\n  };\n\n  function change(newShape) {\n    changed = true;\n    return newShape;\n  }\n\n  function visible(shape) {\n    return shape.visible() && shape.opacity() > 0 && (shouldDraw(shape.fill()) || shouldDraw(shape.stroke()));\n  }\n\n  function optArray(a) {\n    var b = [];\n\n    for (var i = 0; i < a.length; ++i) {\n      var el = opt(a[i]);\n\n      if (el != null) {\n        b.push(el);\n      }\n    }\n\n    return b;\n  }\n\n  function withClipping(shape, f) {\n    var saveclipbox = clipbox;\n    var savematrix = matrix;\n\n    if (shape.transform()) {\n      matrix = matrix.multiplyCopy(shape.transform().matrix());\n    }\n\n    var clip = shape.clip();\n\n    if (clip) {\n      clip = clip.bbox();\n\n      if (clip) {\n        clip = clip.bbox(matrix);\n        clipbox = clipbox ? geo.Rect.intersect(clipbox, clip) : clip;\n      }\n    }\n\n    try {\n      return f();\n    } finally {\n      clipbox = saveclipbox;\n      matrix = savematrix;\n    }\n  }\n\n  function inClipbox(shape) {\n    if (clipbox == null) {\n      return false;\n    }\n\n    var box = shape.rawBBox().bbox(matrix);\n\n    if (clipbox && box) {\n      box = geo.Rect.intersect(box, clipbox);\n    }\n\n    return box;\n  }\n\n  function opt(shape) {\n    return withClipping(shape, function () {\n      if (!(shape instanceof Group || shape instanceof MultiPath)) {\n        var box = inClipbox(shape);\n\n        if (!box) {\n          return change(null);\n        }\n\n        currentBox = currentBox ? geo.Rect.union(currentBox, box) : box;\n      }\n\n      return dispatch({\n        Path: function (shape) {\n          if (shape.segments.length === 0 || !visible(shape)) {\n            return change(null);\n          }\n\n          return shape;\n        },\n        MultiPath: function (shape) {\n          if (!visible(shape)) {\n            return change(null);\n          }\n\n          var el = new MultiPath(shape.options);\n          el.paths = optArray(shape.paths);\n\n          if (el.paths.length === 0) {\n            return change(null);\n          }\n\n          return el;\n        },\n        Circle: function (shape) {\n          if (!visible(shape)) {\n            return change(null);\n          }\n\n          return shape;\n        },\n        Arc: function (shape) {\n          if (!visible(shape)) {\n            return change(null);\n          }\n\n          return shape;\n        },\n        Text: function (shape) {\n          if (!/\\S/.test(shape.content()) || !visible(shape)) {\n            return change(null);\n          }\n\n          return shape;\n        },\n        Image: function (shape) {\n          if (!(shape.visible() && shape.opacity() > 0)) {\n            return change(null);\n          }\n\n          return shape;\n        },\n        Group: function (shape) {\n          if (!(shape.visible() && shape.opacity() > 0)) {\n            return change(null);\n          }\n\n          var el = new Group(shape.options);\n          el.children = optArray(shape.children);\n          el._pdfLink = shape._pdfLink;\n\n          if (shape !== root && el.children.length === 0 && !shape._pdfLink) {\n            return change(null);\n          }\n\n          return el;\n        },\n        Rect: function (shape) {\n          if (!visible(shape)) {\n            return change(null);\n          }\n\n          return shape;\n        }\n      }, shape);\n    });\n  }\n}\n\nfunction exportPDF(group, options) {\n  var promise = createPromise();\n\n  for (var i in options) {\n    if (i == \"margin\" && group.options.pdf && group.options.pdf._ignoreMargin) {\n      // This hackish option is set by the page breaking code in drawDOM.  The idea is\n      // that margin is already taken into account there (that's required to do proper\n      // page breaking) and we don't want to set it again here, as it would double the\n      // top-left margin, and truncate the content on bottom/right.\n      continue;\n    }\n\n    group.options.set(\"pdf.\" + i, options[i]);\n  }\n\n  toDataURL(group, promise.resolve);\n  return promise;\n}\n\nexport { exportPDF, saveAs, toDataURL, toBlob, render };","map":null,"metadata":{},"sourceType":"module"}