{"ast":null,"code":"import GroupNode from './group-node';\nimport Traversable from '../mixins/traversable';\nimport { animationFrame, throttle } from '../common';\nvar FRAME_DELAY = 1000 / 60;\n\nvar RootNode = function (GroupNode) {\n  function RootNode(canvas, size) {\n    GroupNode.call(this);\n    this.canvas = canvas;\n    this.size = size;\n    this.ctx = canvas.getContext(\"2d\");\n\n    var invalidateHandler = this._invalidate.bind(this);\n\n    this.invalidate = throttle(function () {\n      animationFrame(invalidateHandler);\n    }, FRAME_DELAY);\n  }\n\n  if (GroupNode) RootNode.__proto__ = GroupNode;\n  RootNode.prototype = Object.create(GroupNode && GroupNode.prototype);\n  RootNode.prototype.constructor = RootNode;\n\n  RootNode.prototype.destroy = function destroy() {\n    GroupNode.prototype.destroy.call(this);\n    this.canvas = null;\n    this.ctx = null;\n  };\n\n  RootNode.prototype.load = function load(elements, pos, cors) {\n    this.loadElements(elements, pos, cors);\n\n    this._invalidate();\n  };\n\n  RootNode.prototype._rescale = function _rescale() {\n    var ref = this;\n    var canvas = ref.canvas;\n    var size = ref.size;\n    var scale = 1;\n\n    if (typeof window.devicePixelRatio === 'number') {\n      scale = window.devicePixelRatio;\n    }\n\n    canvas.width = size.width * scale;\n    canvas.height = size.height * scale;\n    this.ctx.scale(scale, scale);\n  };\n\n  RootNode.prototype._invalidate = function _invalidate() {\n    if (!this.ctx) {\n      return;\n    }\n\n    this._rescale();\n\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    this.renderTo(this.ctx);\n  };\n\n  return RootNode;\n}(GroupNode);\n\nTraversable.extend(RootNode.prototype, \"childNodes\");\nexport default RootNode;","map":null,"metadata":{},"sourceType":"module"}