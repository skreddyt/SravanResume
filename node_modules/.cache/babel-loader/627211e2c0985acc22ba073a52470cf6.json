{"ast":null,"code":"import BaseNode from '../core/base-node';\nimport renderAllAttr from './utils/render-all-attributes';\nimport renderAttr from './utils/render-attribute';\nimport renderStyle from './utils/render-style';\nimport NODE_MAP from './node-map';\nimport renderSVG from './utils/render-svg';\nimport { SVG_NS, NONE } from './constants';\nimport { support } from '../common';\nimport { defined } from '../util';\nvar TRANSFORM = \"transform\";\nvar DefinitionMap = {\n  clip: \"clip-path\",\n  fill: \"fill\"\n};\n\nfunction isDefinition(type, value) {\n  return type === \"clip\" || type === \"fill\" && (!value || value.nodeType === \"Gradient\");\n}\n\nfunction baseUrl() {\n  var base = document.getElementsByTagName(\"base\")[0];\n  var href = document.location.href;\n  var url = \"\";\n\n  if (base && !(support.browser || {}).msie) {\n    var hashIndex = href.indexOf(\"#\");\n\n    if (hashIndex !== -1) {\n      href = href.substring(0, hashIndex);\n    }\n\n    url = href;\n  }\n\n  return url;\n}\n\nvar Node = function (BaseNode) {\n  function Node(srcElement, options) {\n    BaseNode.call(this, srcElement);\n    this.definitions = {};\n    this.options = options;\n  }\n\n  if (BaseNode) Node.__proto__ = BaseNode;\n  Node.prototype = Object.create(BaseNode && BaseNode.prototype);\n  Node.prototype.constructor = Node;\n\n  Node.prototype.destroy = function destroy() {\n    if (this.element) {\n      this.element._kendoNode = null;\n      this.element = null;\n    }\n\n    this.clearDefinitions();\n    BaseNode.prototype.destroy.call(this);\n  };\n\n  Node.prototype.load = function load(elements, pos) {\n    var this$1 = this;\n\n    for (var i = 0; i < elements.length; i++) {\n      var srcElement = elements[i];\n      var children = srcElement.children;\n      var childNode = new NODE_MAP[srcElement.nodeType](srcElement, this$1.options);\n\n      if (defined(pos)) {\n        this$1.insertAt(childNode, pos);\n      } else {\n        this$1.append(childNode);\n      }\n\n      childNode.createDefinitions();\n\n      if (children && children.length > 0) {\n        childNode.load(children);\n      }\n\n      var element = this$1.element;\n\n      if (element) {\n        childNode.attachTo(element, pos);\n      }\n    }\n  };\n\n  Node.prototype.root = function root() {\n    var root = this;\n\n    while (root.parent) {\n      root = root.parent;\n    }\n\n    return root;\n  };\n\n  Node.prototype.attachTo = function attachTo(domElement, pos) {\n    var container = document.createElement(\"div\");\n    renderSVG(container, \"<svg xmlns='\" + SVG_NS + \"' version='1.1'>\" + this.render() + \"</svg>\");\n    var element = container.firstChild.firstChild;\n\n    if (element) {\n      if (defined(pos)) {\n        domElement.insertBefore(element, domElement.childNodes[pos] || null);\n      } else {\n        domElement.appendChild(element);\n      }\n\n      this.setElement(element);\n    }\n  };\n\n  Node.prototype.setElement = function setElement(element) {\n    if (this.element) {\n      this.element._kendoNode = null;\n    }\n\n    this.element = element;\n    this.element._kendoNode = this;\n    var nodes = this.childNodes;\n\n    for (var i = 0; i < nodes.length; i++) {\n      var childElement = element.childNodes[i];\n      nodes[i].setElement(childElement);\n    }\n  };\n\n  Node.prototype.clear = function clear() {\n    this.clearDefinitions();\n\n    if (this.element) {\n      this.element.innerHTML = \"\";\n    }\n\n    var children = this.childNodes;\n\n    for (var i = 0; i < children.length; i++) {\n      children[i].destroy();\n    }\n\n    this.childNodes = [];\n  };\n\n  Node.prototype.removeSelf = function removeSelf() {\n    if (this.element) {\n      var parentNode = this.element.parentNode;\n\n      if (parentNode) {\n        parentNode.removeChild(this.element);\n      }\n\n      this.element = null;\n    }\n\n    BaseNode.prototype.removeSelf.call(this);\n  };\n\n  Node.prototype.template = function template() {\n    return this.renderChildren();\n  };\n\n  Node.prototype.render = function render() {\n    return this.template();\n  };\n\n  Node.prototype.renderChildren = function renderChildren() {\n    var nodes = this.childNodes;\n    var output = \"\";\n\n    for (var i = 0; i < nodes.length; i++) {\n      output += nodes[i].render();\n    }\n\n    return output;\n  };\n\n  Node.prototype.optionsChange = function optionsChange(e) {\n    var field = e.field;\n    var value = e.value;\n\n    if (field === \"visible\") {\n      this.css(\"display\", value ? \"\" : NONE);\n    } else if (DefinitionMap[field] && isDefinition(field, value)) {\n      this.updateDefinition(field, value);\n    } else if (field === \"opacity\") {\n      this.attr(\"opacity\", value);\n    } else if (field === \"cursor\") {\n      this.css(\"cursor\", value);\n    } else if (field === \"id\") {\n      if (value) {\n        this.attr(\"id\", value);\n      } else {\n        this.removeAttr(\"id\");\n      }\n    }\n\n    BaseNode.prototype.optionsChange.call(this, e);\n  };\n\n  Node.prototype.attr = function attr(name, value) {\n    if (this.element) {\n      this.element.setAttribute(name, value);\n    }\n  };\n\n  Node.prototype.allAttr = function allAttr(attrs) {\n    var this$1 = this;\n\n    for (var i = 0; i < attrs.length; i++) {\n      this$1.attr(attrs[i][0], attrs[i][1]);\n    }\n  };\n\n  Node.prototype.css = function css(name, value) {\n    if (this.element) {\n      this.element.style[name] = value;\n    }\n  };\n\n  Node.prototype.allCss = function allCss(styles) {\n    var this$1 = this;\n\n    for (var i = 0; i < styles.length; i++) {\n      this$1.css(styles[i][0], styles[i][1]);\n    }\n  };\n\n  Node.prototype.removeAttr = function removeAttr(name) {\n    if (this.element) {\n      this.element.removeAttribute(name);\n    }\n  };\n\n  Node.prototype.mapTransform = function mapTransform(transform) {\n    var attrs = [];\n\n    if (transform) {\n      attrs.push([TRANSFORM, \"matrix(\" + transform.matrix().toString(6) + \")\"]);\n    }\n\n    return attrs;\n  };\n\n  Node.prototype.renderTransform = function renderTransform() {\n    return renderAllAttr(this.mapTransform(this.srcElement.transform()));\n  };\n\n  Node.prototype.transformChange = function transformChange(value) {\n    if (value) {\n      this.allAttr(this.mapTransform(value));\n    } else {\n      this.removeAttr(TRANSFORM);\n    }\n  };\n\n  Node.prototype.mapStyle = function mapStyle() {\n    var options = this.srcElement.options;\n    var style = [[\"cursor\", options.cursor]];\n\n    if (options.visible === false) {\n      style.push([\"display\", NONE]);\n    }\n\n    return style;\n  };\n\n  Node.prototype.renderStyle = function renderStyle$1() {\n    return renderAttr(\"style\", renderStyle(this.mapStyle(true)));\n  };\n\n  Node.prototype.renderOpacity = function renderOpacity() {\n    return renderAttr(\"opacity\", this.srcElement.options.opacity);\n  };\n\n  Node.prototype.renderId = function renderId() {\n    return renderAttr(\"id\", this.srcElement.options.id);\n  };\n\n  Node.prototype.createDefinitions = function createDefinitions() {\n    var srcElement = this.srcElement;\n    var definitions = this.definitions;\n\n    if (srcElement) {\n      var options = srcElement.options;\n      var hasDefinitions;\n\n      for (var field in DefinitionMap) {\n        var definition = options.get(field);\n\n        if (definition && isDefinition(field, definition)) {\n          definitions[field] = definition;\n          hasDefinitions = true;\n        }\n      }\n\n      if (hasDefinitions) {\n        this.definitionChange({\n          action: \"add\",\n          definitions: definitions\n        });\n      }\n    }\n  };\n\n  Node.prototype.definitionChange = function definitionChange(e) {\n    if (this.parent) {\n      this.parent.definitionChange(e);\n    }\n  };\n\n  Node.prototype.updateDefinition = function updateDefinition(type, value) {\n    var definitions = this.definitions;\n    var current = definitions[type];\n    var attr = DefinitionMap[type];\n    var definition = {};\n\n    if (current) {\n      definition[type] = current;\n      this.definitionChange({\n        action: \"remove\",\n        definitions: definition\n      });\n      delete definitions[type];\n    }\n\n    if (!value) {\n      if (current) {\n        this.removeAttr(attr);\n      }\n    } else {\n      definition[type] = value;\n      this.definitionChange({\n        action: \"add\",\n        definitions: definition\n      });\n      definitions[type] = value;\n      this.attr(attr, this.refUrl(value.id));\n    }\n  };\n\n  Node.prototype.clearDefinitions = function clearDefinitions() {\n    var definitions = this.definitions;\n    this.definitionChange({\n      action: \"remove\",\n      definitions: definitions\n    });\n    this.definitions = {};\n  };\n\n  Node.prototype.renderDefinitions = function renderDefinitions() {\n    return renderAllAttr(this.mapDefinitions());\n  };\n\n  Node.prototype.mapDefinitions = function mapDefinitions() {\n    var this$1 = this;\n    var definitions = this.definitions;\n    var attrs = [];\n\n    for (var field in definitions) {\n      attrs.push([DefinitionMap[field], this$1.refUrl(definitions[field].id)]);\n    }\n\n    return attrs;\n  };\n\n  Node.prototype.refUrl = function refUrl(id) {\n    var skipBaseHref = (this.options || {}).skipBaseHref;\n    var baseHref = this.baseUrl().replace(/'/g, \"\\\\'\");\n    var base = skipBaseHref ? '' : baseHref;\n    return \"url(\" + base + \"#\" + id + \")\";\n  };\n\n  Node.prototype.baseUrl = function baseUrl$1() {\n    return baseUrl();\n  };\n\n  return Node;\n}(BaseNode);\n\nexport default Node;","map":null,"metadata":{},"sourceType":"module"}