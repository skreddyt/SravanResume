{"ast":null,"code":"var _jsxFileName = \"/Users/sravankumartangella/Documents/udmay/resume/src/PrintButton/PrintButton.js\";\nimport React from 'react';\nimport html2canvas from 'html2canvas';\nimport jsPDF from 'jspdf';\n\nconst pxToMm = px => {\n  return Math.floor(px / document.getElementById('myMm').offsetHeight);\n};\n\nconst mmToPx = mm => {\n  return document.getElementById('myMm').offsetHeight * mm;\n};\n\nconst range = (start, end) => {\n  return Array(end - start).join(0).split(0).map(function (val, id) {\n    return id + start;\n  });\n};\n\nconst PrintButton = ({\n  id,\n  label\n}) => React.createElement(\"div\", {\n  className: \"tc mb4 mt2\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 17\n  },\n  __self: this\n}, React.createElement(\"div\", {\n  id: \"myMm\",\n  style: {\n    height: \"1mm\"\n  },\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 22\n  },\n  __self: this\n}), React.createElement(\"div\", {\n  className: \"pa2 ba bw1 b--black bg-yellow black-90 br2 dib pointer dim shadow-1\",\n  onClick: () => {\n    const input = document.getElementById(id);\n    const inputHeightMm = pxToMm(input.offsetHeight);\n    const a4WidthMm = 210;\n    const a4HeightMm = 297;\n    const a4HeightPx = mmToPx(a4HeightMm);\n    const numPages = inputHeightMm <= a4HeightMm ? 1 : Math.floor(inputHeightMm / a4HeightMm) + 1;\n    html2canvas(input).then(canvas => {\n      const imgData = canvas.toDataURL('image/png');\n      const pdf = new jsPDF('p', 'mm', [inputHeightMm + 16, a4WidthMm]);\n      const pdf1 = new jsPDF(); // Document of a4WidthMm wide and inputHeightMm high\n\n      if (inputHeightMm > a4HeightMm) {// elongated a4 (system print dialog will handle page breaks)\n      } else {// standard a4\n        }\n\n      pdf.addImage(imgData, 'PNG', 0, 0);\n      pdf1.save(\"\".concat(id, \".pdf\"));\n    });\n    ; ////////////////////////////////////////////////////////\n    // System to manually handle page breaks\n    // Wasn't able to get it working !\n    // The idea is to break html2canvas screenshots into multiple chunks and stich them together as a pdf\n    // If you get this working, please email me a khuranashivek@outlook.com and I'll update the article\n    ////////////////////////////////////////////////////////\n\n    /*range(0, numPages).forEach((page) => {\n      console.log(`Rendering page ${page}. Capturing height: ${a4HeightPx} at yOffset: ${page*a4HeightPx}`);\n     html2canvas(input, {height: a4HeightPx, y: page*a4HeightPx})\n       .then((canvas) => {\n        const imgData = canvas.toDataURL('image/png');\n        console.log(imgData)\n       if (page > 0) {\n         pdf.addPage();\n        }\n        pdf.addImage(imgData, 'PNG', 0, 0);\n     });\n      ;\n    });\n    setTimeout(() => {\n     pdf.save(`${id}.pdf`);\n    }, 5000);\n    */\n  },\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 25\n  },\n  __self: this\n}, label));\n\nexport default PrintButton;","map":{"version":3,"sources":["/Users/sravankumartangella/Documents/udmay/resume/src/PrintButton/PrintButton.js"],"names":["React","html2canvas","jsPDF","pxToMm","px","Math","floor","document","getElementById","offsetHeight","mmToPx","mm","range","start","end","Array","join","split","map","val","id","PrintButton","label","height","input","inputHeightMm","a4WidthMm","a4HeightMm","a4HeightPx","numPages","then","canvas","imgData","toDataURL","pdf","pdf1","addImage","save"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,aAAxB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,MAAM,GAAIC,EAAD,IAAQ;AACrB,SAAOC,IAAI,CAACC,KAAL,CAAWF,EAAE,GAACG,QAAQ,CAACC,cAAT,CAAwB,MAAxB,EAAgCC,YAA9C,CAAP;AACD,CAFD;;AAIA,MAAMC,MAAM,GAAIC,EAAD,IAAQ;AACrB,SAAOJ,QAAQ,CAACC,cAAT,CAAwB,MAAxB,EAAgCC,YAAhC,GAA6CE,EAApD;AACD,CAFD;;AAIA,MAAMC,KAAK,GAAG,CAACC,KAAD,EAAQC,GAAR,KAAgB;AAC1B,SAAOC,KAAK,CAACD,GAAG,GAACD,KAAL,CAAL,CAAiBG,IAAjB,CAAsB,CAAtB,EAAyBC,KAAzB,CAA+B,CAA/B,EAAkCC,GAAlC,CAAsC,UAASC,GAAT,EAAcC,EAAd,EAAkB;AAAC,WAAOA,EAAE,GAACP,KAAV;AAAgB,GAAzE,CAAP;AACH,CAFD;;AAIA,MAAMQ,WAAW,GAAG,CAAC;AAACD,EAAAA,EAAD;AAAKE,EAAAA;AAAL,CAAD,KAAkB;AAAK,EAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAKpC;AAAK,EAAA,EAAE,EAAC,MAAR;AAAe,EAAA,KAAK,EAAE;AAACC,IAAAA,MAAM,EAAE;AAAT,GAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EALoC,EAQpC;AACE,EAAA,SAAS,EAAC,qEADZ;AAEE,EAAA,OAAO,EAAE,MAAM;AACb,UAAMC,KAAK,GAAGjB,QAAQ,CAACC,cAAT,CAAwBY,EAAxB,CAAd;AACA,UAAMK,aAAa,GAAGtB,MAAM,CAACqB,KAAK,CAACf,YAAP,CAA5B;AACA,UAAMiB,SAAS,GAAG,GAAlB;AACA,UAAMC,UAAU,GAAG,GAAnB;AACA,UAAMC,UAAU,GAAGlB,MAAM,CAACiB,UAAD,CAAzB;AACA,UAAME,QAAQ,GAAGJ,aAAa,IAAIE,UAAjB,GAA8B,CAA9B,GAAkCtB,IAAI,CAACC,KAAL,CAAWmB,aAAa,GAACE,UAAzB,IAAuC,CAA1F;AAGA1B,IAAAA,WAAW,CAACuB,KAAD,CAAX,CACGM,IADH,CACSC,MAAD,IAAY;AAChB,YAAMC,OAAO,GAAGD,MAAM,CAACE,SAAP,CAAiB,WAAjB,CAAhB;AACA,YAAMC,GAAG,GAAG,IAAIhC,KAAJ,CAAU,GAAV,EAAe,IAAf,EAAqB,CAACuB,aAAa,GAAC,EAAf,EAAmBC,SAAnB,CAArB,CAAZ;AACA,YAAMS,IAAI,GAAG,IAAIjC,KAAJ,EAAb,CAHgB,CAIhB;;AACA,UAAIuB,aAAa,GAAGE,UAApB,EAAgC,CAC9B;AAED,OAHD,MAGO,CACL;AAED;;AAEDO,MAAAA,GAAG,CAACE,QAAJ,CAAaJ,OAAb,EAAsB,KAAtB,EAA6B,CAA7B,EAAgC,CAAhC;AACAG,MAAAA,IAAI,CAACE,IAAL,WAAajB,EAAb;AACD,KAhBH;AAiBA,KA1Ba,CA4Bb;AACA;AACA;AACA;AACA;AACA;;AACC;;;;;;;;;;;;;;;;;AAmBF,GAvDH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAyDGE,KAzDH,CARoC,CAAtC;;AAqEA,eAAeD,WAAf","sourcesContent":["import React from 'react';\nimport html2canvas from 'html2canvas';\nimport jsPDF from 'jspdf';\n\nconst pxToMm = (px) => {\n  return Math.floor(px/document.getElementById('myMm').offsetHeight);\n};\n\nconst mmToPx = (mm) => {\n  return document.getElementById('myMm').offsetHeight*mm;\n};\n\nconst range = (start, end) => {\n    return Array(end-start).join(0).split(0).map(function(val, id) {return id+start});\n};\n\nconst PrintButton = ({id, label}) => (<div className=\"tc mb4 mt2\">\n  {/*\n    Getting pixel height in milimeters:\n    https://stackoverflow.com/questions/7650413/pixel-to-mm-equation/27111621#27111621\n  */}\n  <div id=\"myMm\" style={{height: \"1mm\"}} />\n\n\n  <div\n    className=\"pa2 ba bw1 b--black bg-yellow black-90 br2 dib pointer dim shadow-1\"\n    onClick={() => {\n      const input = document.getElementById(id);\n      const inputHeightMm = pxToMm(input.offsetHeight);\n      const a4WidthMm = 210;\n      const a4HeightMm = 297; \n      const a4HeightPx = mmToPx(a4HeightMm); \n      const numPages = inputHeightMm <= a4HeightMm ? 1 : Math.floor(inputHeightMm/a4HeightMm) + 1;\n     \n\n      html2canvas(input)\n        .then((canvas) => {\n          const imgData = canvas.toDataURL('image/png');\n          const pdf = new jsPDF('p', 'mm', [inputHeightMm+16, a4WidthMm]);\n          const pdf1 = new jsPDF();\n          // Document of a4WidthMm wide and inputHeightMm high\n          if (inputHeightMm > a4HeightMm) {\n            // elongated a4 (system print dialog will handle page breaks)\n            \n          } else {\n            // standard a4\n            \n          }\n          \n          pdf.addImage(imgData, 'PNG', 0, 0);\n          pdf1.save(`${id}.pdf`);\n        });\n      ;\n      \n      ////////////////////////////////////////////////////////\n      // System to manually handle page breaks\n      // Wasn't able to get it working !\n      // The idea is to break html2canvas screenshots into multiple chunks and stich them together as a pdf\n      // If you get this working, please email me a khuranashivek@outlook.com and I'll update the article\n      ////////////////////////////////////////////////////////\n       /*range(0, numPages).forEach((page) => {\n         console.log(`Rendering page ${page}. Capturing height: ${a4HeightPx} at yOffset: ${page*a4HeightPx}`);\n        html2canvas(input, {height: a4HeightPx, y: page*a4HeightPx})\n          .then((canvas) => {\n           const imgData = canvas.toDataURL('image/png');\n           console.log(imgData)\n          if (page > 0) {\n            pdf.addPage();\n           }\n           pdf.addImage(imgData, 'PNG', 0, 0);\n        });\n         ;\n       });\n\n      setTimeout(() => {\n        pdf.save(`${id}.pdf`);\n      }, 5000);\n\n      */\n    }}\n  >\n    {label}\n  </div>\n</div>);\n\nexport default PrintButton;"]},"metadata":{},"sourceType":"module"}