{"ast":null,"code":"import defineGeometryAccessors from '../accessors/define-geometry-accessors';\nimport Element from './element';\nimport Paintable from '../mixins/paintable';\nimport Measurable from '../mixins/measurable';\nimport GeometryRect from '../geometry/rect';\nimport { defined } from '../util';\n\nvar Rect = function (Element) {\n  function Rect(geometry, options) {\n    if (geometry === void 0) geometry = new GeometryRect();\n    if (options === void 0) options = {};\n    Element.call(this, options);\n    this.geometry(geometry);\n\n    if (!defined(this.options.stroke)) {\n      this.stroke(\"#000\");\n    }\n  }\n\n  if (Element) Rect.__proto__ = Element;\n  Rect.prototype = Object.create(Element && Element.prototype);\n  Rect.prototype.constructor = Rect;\n\n  Rect.prototype._bbox = function _bbox(matrix) {\n    return this._geometry.bbox(matrix);\n  };\n\n  Rect.prototype.rawBBox = function rawBBox() {\n    return this._geometry.bbox();\n  };\n\n  Rect.prototype._containsPoint = function _containsPoint(point) {\n    return this._geometry.containsPoint(point);\n  };\n\n  Rect.prototype._isOnPath = function _isOnPath(point) {\n    return this.geometry()._isOnPath(point, this.options.stroke.width / 2);\n  };\n\n  return Rect;\n}(Element);\n\nRect.prototype.nodeType = \"Rect\";\nPaintable.extend(Rect.prototype);\nMeasurable.extend(Rect.prototype);\ndefineGeometryAccessors(Rect.prototype, [\"geometry\"]);\nexport default Rect;","map":null,"metadata":{},"sourceType":"module"}