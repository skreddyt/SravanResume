{"ast":null,"code":"import ObserversMixin from '../mixins/observers-mixin';\nimport { Class } from '../common';\nvar push = [].push;\nvar pop = [].pop;\nvar splice = [].splice;\nvar shift = [].shift;\nvar slice = [].slice;\nvar unshift = [].unshift;\n\nvar ElementsArray = function (Class) {\n  function ElementsArray(array) {\n    if (array === void 0) array = [];\n    Class.call(this);\n    this.length = 0;\n\n    this._splice(0, array.length, array);\n  }\n\n  if (Class) ElementsArray.__proto__ = Class;\n  ElementsArray.prototype = Object.create(Class && Class.prototype);\n  ElementsArray.prototype.constructor = ElementsArray;\n\n  ElementsArray.prototype.elements = function elements(value) {\n    if (value) {\n      this._splice(0, this.length, value);\n\n      this._change();\n\n      return this;\n    }\n\n    return this.slice(0);\n  };\n\n  ElementsArray.prototype.push = function push$1() {\n    var elements = arguments;\n    var result = push.apply(this, elements);\n\n    this._add(elements);\n\n    return result;\n  };\n\n  ElementsArray.prototype.slice = function slice$1() {\n    return slice.call(this);\n  };\n\n  ElementsArray.prototype.pop = function pop$1() {\n    var length = this.length;\n    var result = pop.apply(this);\n\n    if (length) {\n      this._remove([result]);\n    }\n\n    return result;\n  };\n\n  ElementsArray.prototype.splice = function splice(index, howMany) {\n    var elements = slice.call(arguments, 2);\n\n    var result = this._splice(index, howMany, elements);\n\n    this._change();\n\n    return result;\n  };\n\n  ElementsArray.prototype.shift = function shift$1() {\n    var length = this.length;\n    var result = shift.apply(this);\n\n    if (length) {\n      this._remove([result]);\n    }\n\n    return result;\n  };\n\n  ElementsArray.prototype.unshift = function unshift$1() {\n    var elements = arguments;\n    var result = unshift.apply(this, elements);\n\n    this._add(elements);\n\n    return result;\n  };\n\n  ElementsArray.prototype.indexOf = function indexOf(element) {\n    var this$1 = this;\n    var length = this.length;\n\n    for (var idx = 0; idx < length; idx++) {\n      if (this$1[idx] === element) {\n        return idx;\n      }\n    }\n\n    return -1;\n  };\n\n  ElementsArray.prototype._splice = function _splice(index, howMany, elements) {\n    var result = splice.apply(this, [index, howMany].concat(elements));\n\n    this._clearObserver(result);\n\n    this._setObserver(elements);\n\n    return result;\n  };\n\n  ElementsArray.prototype._add = function _add(elements) {\n    this._setObserver(elements);\n\n    this._change();\n  };\n\n  ElementsArray.prototype._remove = function _remove(elements) {\n    this._clearObserver(elements);\n\n    this._change();\n  };\n\n  ElementsArray.prototype._setObserver = function _setObserver(elements) {\n    var this$1 = this;\n\n    for (var idx = 0; idx < elements.length; idx++) {\n      elements[idx].addObserver(this$1);\n    }\n  };\n\n  ElementsArray.prototype._clearObserver = function _clearObserver(elements) {\n    var this$1 = this;\n\n    for (var idx = 0; idx < elements.length; idx++) {\n      elements[idx].removeObserver(this$1);\n    }\n  };\n\n  ElementsArray.prototype._change = function _change() {};\n\n  return ElementsArray;\n}(Class);\n\nObserversMixin.extend(ElementsArray.prototype);\nexport default ElementsArray;","map":null,"metadata":{},"sourceType":"module"}