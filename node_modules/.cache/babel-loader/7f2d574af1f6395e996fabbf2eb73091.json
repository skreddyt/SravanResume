{"ast":null,"code":"import BaseSurface from '../core/surface';\nimport SurfaceFactory from '../core/surface-factory';\nimport { createPromise, promiseAll, bindEvents, elementSize, unbindEvents } from '../util';\nimport RootNode from './root-node';\nimport ShapesQuadTree from '../search/shapes-quad-tree';\nimport SurfaceCursor from './surface-cursor';\n\nvar Surface = function (BaseSurface) {\n  function Surface(element, options) {\n    BaseSurface.call(this, element, options);\n    this.element.innerHTML = this._template(this);\n    var canvas = this.element.firstElementChild;\n    var size = elementSize(element);\n    canvas.width = size.width;\n    canvas.height = size.height;\n    this._rootElement = canvas;\n    this._root = new RootNode(canvas, size);\n    this._mouseTrackHandler = this._trackMouse.bind(this);\n    bindEvents(this.element, {\n      click: this._mouseTrackHandler,\n      mousemove: this._mouseTrackHandler\n    });\n  }\n\n  if (BaseSurface) Surface.__proto__ = BaseSurface;\n  Surface.prototype = Object.create(BaseSurface && BaseSurface.prototype);\n  Surface.prototype.constructor = Surface;\n\n  Surface.prototype.destroy = function destroy() {\n    BaseSurface.prototype.destroy.call(this);\n\n    if (this._root) {\n      this._root.destroy();\n\n      this._root = null;\n    }\n\n    if (this._searchTree) {\n      this._searchTree.clear();\n\n      delete this._searchTree;\n    }\n\n    if (this._cursor) {\n      this._cursor.destroy();\n\n      delete this._cursor;\n    }\n\n    unbindEvents(this.element, {\n      click: this._mouseTrackHandler,\n      mousemove: this._mouseTrackHandler\n    });\n  };\n\n  Surface.prototype.draw = function draw(element) {\n    BaseSurface.prototype.draw.call(this, element);\n\n    this._root.load([element], undefined, this.options.cors);\n\n    if (this._searchTree) {\n      this._searchTree.add([element]);\n    }\n  };\n\n  Surface.prototype.clear = function clear() {\n    BaseSurface.prototype.clear.call(this);\n\n    this._root.clear();\n\n    if (this._searchTree) {\n      this._searchTree.clear();\n    }\n\n    if (this._cursor) {\n      this._cursor.clear();\n    }\n  };\n\n  Surface.prototype.eventTarget = function eventTarget(e) {\n    if (this._searchTree) {\n      var point = this._surfacePoint(e);\n\n      var shape = this._searchTree.pointShape(point);\n\n      return shape;\n    }\n  };\n\n  Surface.prototype.image = function image() {\n    var ref = this;\n    var root = ref._root;\n    var rootElement = ref._rootElement;\n    var loadingStates = [];\n    root.traverse(function (childNode) {\n      if (childNode.loading) {\n        loadingStates.push(childNode.loading);\n      }\n    });\n    var promise = createPromise();\n\n    var resolveDataURL = function () {\n      root._invalidate();\n\n      try {\n        var data = rootElement.toDataURL();\n        promise.resolve(data);\n      } catch (e) {\n        promise.reject(e);\n      }\n    };\n\n    promiseAll(loadingStates).then(resolveDataURL, resolveDataURL);\n    return promise;\n  };\n\n  Surface.prototype.suspendTracking = function suspendTracking() {\n    BaseSurface.prototype.suspendTracking.call(this);\n\n    if (this._searchTree) {\n      this._searchTree.clear();\n\n      delete this._searchTree;\n    }\n  };\n\n  Surface.prototype.resumeTracking = function resumeTracking() {\n    BaseSurface.prototype.resumeTracking.call(this);\n\n    if (!this._searchTree) {\n      this._searchTree = new ShapesQuadTree();\n      var childNodes = this._root.childNodes;\n      var rootElements = [];\n\n      for (var idx = 0; idx < childNodes.length; idx++) {\n        rootElements.push(childNodes[idx].srcElement);\n      }\n\n      this._searchTree.add(rootElements);\n    }\n  };\n\n  Surface.prototype._resize = function _resize() {\n    this._rootElement.width = this._size.width;\n    this._rootElement.height = this._size.height;\n    this._root.size = this._size;\n\n    this._root.invalidate();\n  };\n\n  Surface.prototype._template = function _template() {\n    return \"<canvas style='width: 100%; height: 100%;'></canvas>\";\n  };\n\n  Surface.prototype._enableTracking = function _enableTracking() {\n    this._searchTree = new ShapesQuadTree();\n    this._cursor = new SurfaceCursor(this);\n\n    BaseSurface.prototype._enableTracking.call(this);\n  };\n\n  Surface.prototype._trackMouse = function _trackMouse(e) {\n    if (this._suspendedTracking) {\n      return;\n    }\n\n    var shape = this.eventTarget(e);\n\n    if (e.type !== \"click\") {\n      var currentShape = this._currentShape;\n\n      if (currentShape && currentShape !== shape) {\n        this.trigger(\"mouseleave\", {\n          element: currentShape,\n          originalEvent: e,\n          type: \"mouseleave\"\n        });\n      }\n\n      if (shape && currentShape !== shape) {\n        this.trigger(\"mouseenter\", {\n          element: shape,\n          originalEvent: e,\n          type: \"mouseenter\"\n        });\n      }\n\n      this.trigger(\"mousemove\", {\n        element: shape,\n        originalEvent: e,\n        type: \"mousemove\"\n      });\n      this._currentShape = shape;\n    } else if (shape) {\n      this.trigger(\"click\", {\n        element: shape,\n        originalEvent: e,\n        type: \"click\"\n      });\n    }\n  };\n\n  return Surface;\n}(BaseSurface);\n\nSurface.prototype.type = \"canvas\";\n\nif (typeof document !== \"undefined\" && document.createElement(\"canvas\").getContext) {\n  BaseSurface.support.canvas = true;\n  SurfaceFactory.current.register(\"canvas\", Surface, 20);\n}\n\nexport default Surface;","map":null,"metadata":{},"sourceType":"module"}