{"ast":null,"code":"import GeometryArc from '../geometry/arc';\nimport Element from './element';\nimport Path from './path';\nimport Paintable from '../mixins/paintable';\nimport Measurable from '../mixins/measurable';\nimport defineGeometryAccessors from '../accessors/define-geometry-accessors';\nimport { defined } from '../util';\nvar DEFAULT_STROKE = \"#000\";\n\nvar Arc = function (Element) {\n  function Arc(geometry, options) {\n    if (geometry === void 0) geometry = new GeometryArc();\n    if (options === void 0) options = {};\n    Element.call(this, options);\n    this.geometry(geometry);\n\n    if (!defined(this.options.stroke)) {\n      this.stroke(DEFAULT_STROKE);\n    }\n  }\n\n  if (Element) Arc.__proto__ = Element;\n  Arc.prototype = Object.create(Element && Element.prototype);\n  Arc.prototype.constructor = Arc;\n\n  Arc.prototype._bbox = function _bbox(matrix) {\n    return this._geometry.bbox(matrix);\n  };\n\n  Arc.prototype.rawBBox = function rawBBox() {\n    return this.geometry().bbox();\n  };\n\n  Arc.prototype.toPath = function toPath() {\n    var path = new Path();\n    var curvePoints = this.geometry().curvePoints();\n\n    if (curvePoints.length > 0) {\n      path.moveTo(curvePoints[0].x, curvePoints[0].y);\n\n      for (var i = 1; i < curvePoints.length; i += 3) {\n        path.curveTo(curvePoints[i], curvePoints[i + 1], curvePoints[i + 2]);\n      }\n    }\n\n    return path;\n  };\n\n  Arc.prototype._containsPoint = function _containsPoint(point) {\n    return this.geometry().containsPoint(point);\n  };\n\n  Arc.prototype._isOnPath = function _isOnPath(point) {\n    return this.geometry()._isOnPath(point, this.options.stroke.width / 2);\n  };\n\n  return Arc;\n}(Element);\n\nArc.prototype.nodeType = \"Arc\";\nPaintable.extend(Arc.prototype);\nMeasurable.extend(Arc.prototype);\ndefineGeometryAccessors(Arc.prototype, [\"geometry\"]);\nexport default Arc;","map":null,"metadata":{},"sourceType":"module"}