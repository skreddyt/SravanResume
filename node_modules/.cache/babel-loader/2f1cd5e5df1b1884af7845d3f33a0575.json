{"ast":null,"code":"import toCubicPolynomial from './to-cubic-polynomial';\nimport solveCubicEquation from './solve-cubic-equation';\nimport calculateCurveAt from './calculate-curve-at';\nexport default function hasRootsInRange(points, point, field, rootField, range) {\n  var polynomial = toCubicPolynomial(points, rootField);\n  var roots = solveCubicEquation(polynomial[0], polynomial[1], polynomial[2], polynomial[3] - point[rootField]);\n  var intersection;\n\n  for (var idx = 0; idx < roots.length; idx++) {\n    if (0 <= roots[idx] && roots[idx] <= 1) {\n      intersection = calculateCurveAt(roots[idx], field, points);\n\n      if (Math.abs(intersection - point[field]) <= range) {\n        return true;\n      }\n    }\n  }\n}","map":null,"metadata":{},"sourceType":"module"}