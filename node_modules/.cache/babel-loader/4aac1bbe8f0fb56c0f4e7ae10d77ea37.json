{"ast":null,"code":"import defineAccessors from '../accessors/define-accessors';\nimport ObserversMixin from '../mixins/observers-mixin';\nimport { Class } from '../common';\nimport { defined, MIN_NUM, MAX_NUM, round } from '../util';\nimport Matrix from './matrix';\nimport toMatrix from './to-matrix';\n\nvar Point = function (Class) {\n  function Point(x, y) {\n    Class.call(this);\n    this.x = x || 0;\n    this.y = y || 0;\n  }\n\n  if (Class) Point.__proto__ = Class;\n  Point.prototype = Object.create(Class && Class.prototype);\n  Point.prototype.constructor = Point;\n  var staticAccessors = {\n    ZERO: {\n      configurable: true\n    }\n  };\n\n  Point.prototype.equals = function equals(other) {\n    return other && other.x === this.x && other.y === this.y;\n  };\n\n  Point.prototype.clone = function clone() {\n    return new Point(this.x, this.y);\n  };\n\n  Point.prototype.rotate = function rotate(angle, origin) {\n    var originPoint = Point.create(origin) || Point.ZERO;\n    return this.transform(Matrix.rotate(angle, originPoint.x, originPoint.y));\n  };\n\n  Point.prototype.translate = function translate(x, y) {\n    this.x += x;\n    this.y += y;\n    this.geometryChange();\n    return this;\n  };\n\n  Point.prototype.translateWith = function translateWith(point) {\n    return this.translate(point.x, point.y);\n  };\n\n  Point.prototype.move = function move(x, y) {\n    this.x = this.y = 0;\n    return this.translate(x, y);\n  };\n\n  Point.prototype.scale = function scale(scaleX, scaleY) {\n    if (scaleY === void 0) scaleY = scaleX;\n    this.x *= scaleX;\n    this.y *= scaleY;\n    this.geometryChange();\n    return this;\n  };\n\n  Point.prototype.scaleCopy = function scaleCopy(scaleX, scaleY) {\n    return this.clone().scale(scaleX, scaleY);\n  };\n\n  Point.prototype.transform = function transform(transformation) {\n    var matrix = toMatrix(transformation);\n    var ref = this;\n    var x = ref.x;\n    var y = ref.y;\n    this.x = matrix.a * x + matrix.c * y + matrix.e;\n    this.y = matrix.b * x + matrix.d * y + matrix.f;\n    this.geometryChange();\n    return this;\n  };\n\n  Point.prototype.transformCopy = function transformCopy(transformation) {\n    var point = this.clone();\n\n    if (transformation) {\n      point.transform(transformation);\n    }\n\n    return point;\n  };\n\n  Point.prototype.distanceTo = function distanceTo(point) {\n    var dx = this.x - point.x;\n    var dy = this.y - point.y;\n    return Math.sqrt(dx * dx + dy * dy);\n  };\n\n  Point.prototype.round = function round$1(digits) {\n    this.x = round(this.x, digits);\n    this.y = round(this.y, digits);\n    this.geometryChange();\n    return this;\n  };\n\n  Point.prototype.toArray = function toArray(digits) {\n    var doRound = defined(digits);\n    var x = doRound ? round(this.x, digits) : this.x;\n    var y = doRound ? round(this.y, digits) : this.y;\n    return [x, y];\n  };\n\n  Point.prototype.toString = function toString(digits, separator) {\n    if (separator === void 0) separator = \" \";\n    var ref = this;\n    var x = ref.x;\n    var y = ref.y;\n\n    if (defined(digits)) {\n      x = round(x, digits);\n      y = round(y, digits);\n    }\n\n    return x + separator + y;\n  };\n\n  Point.create = function create(arg0, arg1) {\n    if (defined(arg0)) {\n      if (arg0 instanceof Point) {\n        return arg0;\n      } else if (arguments.length === 1 && arg0.length === 2) {\n        return new Point(arg0[0], arg0[1]);\n      }\n\n      return new Point(arg0, arg1);\n    }\n  };\n\n  Point.min = function min() {\n    var arguments$1 = arguments;\n    var minX = MAX_NUM;\n    var minY = MAX_NUM;\n\n    for (var i = 0; i < arguments.length; i++) {\n      var point = arguments$1[i];\n      minX = Math.min(point.x, minX);\n      minY = Math.min(point.y, minY);\n    }\n\n    return new Point(minX, minY);\n  };\n\n  Point.max = function max() {\n    var arguments$1 = arguments;\n    var maxX = MIN_NUM;\n    var maxY = MIN_NUM;\n\n    for (var i = 0; i < arguments.length; i++) {\n      var point = arguments$1[i];\n      maxX = Math.max(point.x, maxX);\n      maxY = Math.max(point.y, maxY);\n    }\n\n    return new Point(maxX, maxY);\n  };\n\n  Point.minPoint = function minPoint() {\n    return new Point(MIN_NUM, MIN_NUM);\n  };\n\n  Point.maxPoint = function maxPoint() {\n    return new Point(MAX_NUM, MAX_NUM);\n  };\n\n  staticAccessors.ZERO.get = function () {\n    return new Point(0, 0);\n  };\n\n  Object.defineProperties(Point, staticAccessors);\n  return Point;\n}(Class);\n\ndefineAccessors(Point.prototype, [\"x\", \"y\"]);\nObserversMixin.extend(Point.prototype);\nexport default Point;","map":null,"metadata":{},"sourceType":"module"}