{"ast":null,"code":"import QuadRoot from './quad-root';\nimport QuadNode from './quad-node';\nimport { Rect } from '../geometry';\nimport { Class } from '../common';\nimport { append } from '../util';\nvar ROOT_SIZE = 3000;\nvar LEVEL_STEP = 10000;\nvar MAX_LEVEL = 75;\n\nvar ShapesQuadTree = function (Class) {\n  function ShapesQuadTree() {\n    Class.call(this);\n    this.initRoots();\n  }\n\n  if (Class) ShapesQuadTree.__proto__ = Class;\n  ShapesQuadTree.prototype = Object.create(Class && Class.prototype);\n  ShapesQuadTree.prototype.constructor = ShapesQuadTree;\n\n  ShapesQuadTree.prototype.initRoots = function initRoots() {\n    this.rootMap = {};\n    this.root = new QuadRoot();\n    this.rootElements = [];\n  };\n\n  ShapesQuadTree.prototype.clear = function clear() {\n    var this$1 = this;\n    var rootElements = this.rootElements;\n\n    for (var idx = 0; idx < rootElements.length; idx++) {\n      this$1.remove(rootElements[idx]);\n    }\n\n    this.initRoots();\n  };\n\n  ShapesQuadTree.prototype.pointShape = function pointShape(point) {\n    var sectorRoot = (this.rootMap[Math.floor(point.x / ROOT_SIZE)] || {})[Math.floor(point.y / ROOT_SIZE)];\n    var result = this.root.pointShapes(point);\n\n    if (sectorRoot) {\n      result = result.concat(sectorRoot.pointShapes(point));\n    }\n\n    this.assignZindex(result);\n    result.sort(zIndexComparer);\n\n    for (var idx = 0; idx < result.length; idx++) {\n      if (result[idx].containsPoint(point)) {\n        return result[idx];\n      }\n    }\n  };\n\n  ShapesQuadTree.prototype.assignZindex = function assignZindex(elements) {\n    var this$1 = this;\n\n    for (var idx = 0; idx < elements.length; idx++) {\n      var element = elements[idx];\n      var zIndex = 0;\n      var levelWeight = Math.pow(LEVEL_STEP, MAX_LEVEL);\n      var parents = [];\n\n      while (element) {\n        parents.push(element);\n        element = element.parent;\n      }\n\n      while (parents.length) {\n        element = parents.pop();\n        zIndex += ((element.parent ? element.parent.children : this$1.rootElements).indexOf(element) + 1) * levelWeight;\n        levelWeight /= LEVEL_STEP;\n      }\n\n      elements[idx]._zIndex = zIndex;\n    }\n  };\n\n  ShapesQuadTree.prototype.optionsChange = function optionsChange(e) {\n    if (e.field === \"transform\" || e.field === \"stroke.width\") {\n      this.bboxChange(e.element);\n    }\n  };\n\n  ShapesQuadTree.prototype.geometryChange = function geometryChange(e) {\n    this.bboxChange(e.element);\n  };\n\n  ShapesQuadTree.prototype.bboxChange = function bboxChange(element) {\n    var this$1 = this;\n\n    if (element.nodeType === \"Group\") {\n      for (var idx = 0; idx < element.children.length; idx++) {\n        this$1.bboxChange(element.children[idx]);\n      }\n    } else {\n      if (element._quadNode) {\n        element._quadNode.remove(element);\n      }\n\n      this._insertShape(element);\n    }\n  };\n\n  ShapesQuadTree.prototype.add = function add(elements) {\n    var elementsArray = Array.isArray(elements) ? elements.slice(0) : [elements];\n    append(this.rootElements, elementsArray);\n\n    this._insert(elementsArray);\n  };\n\n  ShapesQuadTree.prototype.childrenChange = function childrenChange(e) {\n    var this$1 = this;\n\n    if (e.action === \"remove\") {\n      for (var idx = 0; idx < e.items.length; idx++) {\n        this$1.remove(e.items[idx]);\n      }\n    } else {\n      this._insert(Array.prototype.slice.call(e.items, 0));\n    }\n  };\n\n  ShapesQuadTree.prototype._insert = function _insert(elements) {\n    var this$1 = this;\n    var element;\n\n    while (elements.length > 0) {\n      element = elements.pop();\n      element.addObserver(this$1);\n\n      if (element.nodeType === \"Group\") {\n        append(elements, element.children);\n      } else {\n        this$1._insertShape(element);\n      }\n    }\n  };\n\n  ShapesQuadTree.prototype._insertShape = function _insertShape(shape) {\n    var bbox = shape.bbox();\n\n    if (bbox) {\n      var sectors = this.getSectors(bbox);\n      var x = sectors[0][0];\n      var y = sectors[1][0];\n\n      if (this.inRoot(sectors)) {\n        this.root.insert(shape, bbox);\n      } else {\n        var rootMap = this.rootMap;\n\n        if (!rootMap[x]) {\n          rootMap[x] = {};\n        }\n\n        if (!rootMap[x][y]) {\n          rootMap[x][y] = new QuadNode(new Rect([x * ROOT_SIZE, y * ROOT_SIZE], [ROOT_SIZE, ROOT_SIZE]));\n        }\n\n        rootMap[x][y].insert(shape, bbox);\n      }\n    }\n  };\n\n  ShapesQuadTree.prototype.remove = function remove(element) {\n    var this$1 = this;\n    element.removeObserver(this);\n\n    if (element.nodeType === \"Group\") {\n      var children = element.children;\n\n      for (var idx = 0; idx < children.length; idx++) {\n        this$1.remove(children[idx]);\n      }\n    } else if (element._quadNode) {\n      element._quadNode.remove(element);\n\n      delete element._quadNode;\n    }\n  };\n\n  ShapesQuadTree.prototype.inRoot = function inRoot(sectors) {\n    return sectors[0].length > 1 || sectors[1].length > 1;\n  };\n\n  ShapesQuadTree.prototype.getSectors = function getSectors(rect) {\n    var bottomRight = rect.bottomRight();\n    var bottomX = Math.floor(bottomRight.x / ROOT_SIZE);\n    var bottomY = Math.floor(bottomRight.y / ROOT_SIZE);\n    var sectors = [[], []];\n\n    for (var x = Math.floor(rect.origin.x / ROOT_SIZE); x <= bottomX; x++) {\n      sectors[0].push(x);\n    }\n\n    for (var y = Math.floor(rect.origin.y / ROOT_SIZE); y <= bottomY; y++) {\n      sectors[1].push(y);\n    }\n\n    return sectors;\n  };\n\n  return ShapesQuadTree;\n}(Class);\n\nfunction zIndexComparer(x1, x2) {\n  if (x1._zIndex < x2._zIndex) {\n    return 1;\n  }\n\n  if (x1._zIndex > x2._zIndex) {\n    return -1;\n  }\n\n  return 0;\n}\n\nexport default ShapesQuadTree;","map":null,"metadata":{},"sourceType":"module"}