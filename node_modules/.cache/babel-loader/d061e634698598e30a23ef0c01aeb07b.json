{"ast":null,"code":"import { Class } from '../common';\nimport MultiPath from '../shapes/multi-path';\nimport Point from '../geometry/point';\nimport ShapeMap from './shape-map';\nvar SEGMENT_REGEX = /([a-df-z]{1})([^a-df-z]*)(z)?/gi;\nvar SPLIT_REGEX = /[,\\s]?([+\\-]?(?:\\d*\\.\\d+|\\d+)(?:[eE][+\\-]?\\d+)?)/g;\nvar MOVE = \"m\";\nvar CLOSE = \"z\";\n\nfunction parseParameters(str) {\n  var parameters = [];\n  str.replace(SPLIT_REGEX, function (match, number) {\n    parameters.push(parseFloat(number));\n  });\n  return parameters;\n}\n\nvar PathParser = function (Class) {\n  function PathParser() {\n    Class.apply(this, arguments);\n  }\n\n  if (Class) PathParser.__proto__ = Class;\n  PathParser.prototype = Object.create(Class && Class.prototype);\n  PathParser.prototype.constructor = PathParser;\n\n  PathParser.prototype.parse = function parse(str, options) {\n    var multiPath = new MultiPath(options);\n    var position = new Point();\n    var previousCommand;\n    str.replace(SEGMENT_REGEX, function (match, element, params, closePath) {\n      var command = element.toLowerCase();\n      var isRelative = command === element;\n      var parameters = parseParameters(params.trim());\n\n      if (command === MOVE) {\n        if (isRelative) {\n          position.x += parameters[0];\n          position.y += parameters[1];\n        } else {\n          position.x = parameters[0];\n          position.y = parameters[1];\n        }\n\n        multiPath.moveTo(position.x, position.y);\n\n        if (parameters.length > 2) {\n          command = \"l\";\n          parameters.splice(0, 2);\n        }\n      }\n\n      if (ShapeMap[command]) {\n        ShapeMap[command](multiPath, {\n          parameters: parameters,\n          position: position,\n          isRelative: isRelative,\n          previousCommand: previousCommand\n        });\n\n        if (closePath && closePath.toLowerCase() === CLOSE) {\n          multiPath.close();\n        }\n      } else if (command !== MOVE) {\n        throw new Error(\"Error while parsing SVG path. Unsupported command: \" + command);\n      }\n\n      previousCommand = command;\n    });\n    return multiPath;\n  };\n\n  return PathParser;\n}(Class);\n\nPathParser.current = new PathParser();\nexport default PathParser;","map":null,"metadata":{},"sourceType":"module"}